import UnitizationTest.Basic

open CategoryTheory

open Unitization in
noncomputable def CStarAlg.unitization : CStarAlg ‚•§ CStarAlg‚ÇÅ where
  obj A := ‚ü®Unitization ‚ÑÇ A‚ü©
  map f := starMap f
  map_id _ := starMap_id
  map_comp _ _ := starMap_comp

universe u v

namespace CommCStarAlg‚ÇÅ

noncomputable def ofCompHaus : CompHaus.{u}·µí·µñ ‚•§ CommCStarAlg‚ÇÅ.{u} where
  obj X := ‚ü®‚ü®C(X.unop, ‚ÑÇ)‚ü©, mul_comm‚ü©
  map {X Y} f := ContinuousMap.compStarAlgHom' ‚ÑÇ ‚ÑÇ f.unop

open Opposite in
noncomputable def toCompHaus : CommCStarAlg‚ÇÅ.{u} ‚•§ CompHaus.{u}·µí·µñ where
  obj A := ‚ü®{toTop := {Œ± := WeakDual.characterSpace ‚ÑÇ A}, prop := True.intro}‚ü©
  map {X Y} f := op (WeakDual.CharacterSpace.compContinuousMap f)

noncomputable def gelfandDuality : CommCStarAlg‚ÇÅ.{u} ‚âå CompHaus.{u}·µí·µñ where
  functor := toCompHaus
  inverse := ofCompHaus
  unitIso := NatIso.ofComponents fun A ‚Ü¶(gelfandStarTransform A).toCommCStarAlg‚ÇÅIso (B := (toCompHaus ‚ãô ofCompHaus).obj A)
  counitIso := NatIso.op <| show (ùü≠ CompHaus) ‚âÖ (ofCompHaus.rightOp ‚ãô toCompHaus.leftOp)
    from NatIso.ofComponents fun X ‚Ü¶ CompHausLike.isoOfHomeo (WeakDual.CharacterSpace.homeoEval X ‚ÑÇ)

end CommCStarAlg‚ÇÅ

structure LocCompHaus where
  carrier : Type u
  [topologicalSpace : TopologicalSpace carrier]
  [locallyCompactSpace : LocallyCompactSpace carrier]
  [t2space : T2Space carrier]

namespace LocCompHaus

noncomputable instance : Inhabited LocCompHaus := ‚ü®‚ü®Empty‚ü©‚ü©

instance : CoeSort LocCompHaus (Type u) := ‚ü®LocCompHaus.carrier‚ü©

attribute [instance] topologicalSpace locallyCompactSpace t2space

noncomputable instance : Category LocCompHaus.{u} where
  Hom X Y := CocompactMap X Y
  id X := CocompactMap.id X
  comp f g := g.comp f

instance instFunLike (X Y : LocCompHaus) : FunLike (X ‚ü∂ Y) X Y :=
  inferInstanceAs <| FunLike (CocompactMap X Y) X Y

instance instCocompactMapClass (X Y : LocCompHaus) : CocompactMapClass (X ‚ü∂ Y) X Y :=
  inferInstanceAs <| CocompactMapClass (CocompactMap X Y) X Y

noncomputable instance : ConcreteCategory LocCompHaus.{u} where
  forget :=
    { obj := fun A ‚Ü¶ A
      map := fun f ‚Ü¶ f }
  forget_faithful :=
    { map_injective := fun {X Y} ‚Ü¶ DFunLike.coe_injective }

/-- Construct a bundled `LocCompHaus` from the underlying type and appropriate type classes. -/
def of (A : Type u) [TopologicalSpace A] [LocallyCompactSpace A] [T2Space A] : LocCompHaus := ‚ü®A‚ü©

@[simp] lemma coe_of (A : Type u) [TopologicalSpace A] [LocallyCompactSpace A] [T2Space A] : (of A : Type u) = A := rfl

instance forgetTopologicalSpace (A : LocCompHaus) : TopologicalSpace ((forget LocCompHaus).obj A) :=
  A.topologicalSpace

instance forgetLocallyCompactSpace (A : LocCompHaus) : LocallyCompactSpace ((forget LocCompHaus).obj A) :=
  A.locallyCompactSpace

instance forgetT2Space (A : LocCompHaus) : T2Space ((forget LocCompHaus).obj A) :=
  A.t2space

end LocCompHaus
